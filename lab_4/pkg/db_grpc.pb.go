// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BaseClient is the client API for Base service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseClient interface {
	Put(ctx context.Context, in *ParametroPut, opts ...grpc.CallOption) (*ResultadoPut, error)
	Get(ctx context.Context, in *ParametroGet, opts ...grpc.CallOption) (*ResultadoGet, error)
	GetAll(ctx context.Context, in *ParametroGetAll, opts ...grpc.CallOption) (*ResultadoGetAll, error)
}

type baseClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseClient(cc grpc.ClientConnInterface) BaseClient {
	return &baseClient{cc}
}

func (c *baseClient) Put(ctx context.Context, in *ParametroPut, opts ...grpc.CallOption) (*ResultadoPut, error) {
	out := new(ResultadoPut)
	err := c.cc.Invoke(ctx, "/db.base/put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) Get(ctx context.Context, in *ParametroGet, opts ...grpc.CallOption) (*ResultadoGet, error) {
	out := new(ResultadoGet)
	err := c.cc.Invoke(ctx, "/db.base/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) GetAll(ctx context.Context, in *ParametroGetAll, opts ...grpc.CallOption) (*ResultadoGetAll, error) {
	out := new(ResultadoGetAll)
	err := c.cc.Invoke(ctx, "/db.base/getAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseServer is the server API for Base service.
// All implementations must embed UnimplementedBaseServer
// for forward compatibility
type BaseServer interface {
	Put(context.Context, *ParametroPut) (*ResultadoPut, error)
	Get(context.Context, *ParametroGet) (*ResultadoGet, error)
	GetAll(context.Context, *ParametroGetAll) (*ResultadoGetAll, error)
	mustEmbedUnimplementedBaseServer()
}

// UnimplementedBaseServer must be embedded to have forward compatible implementations.
type UnimplementedBaseServer struct {
}

func (UnimplementedBaseServer) Put(context.Context, *ParametroPut) (*ResultadoPut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedBaseServer) Get(context.Context, *ParametroGet) (*ResultadoGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBaseServer) GetAll(context.Context, *ParametroGetAll) (*ResultadoGetAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBaseServer) mustEmbedUnimplementedBaseServer() {}

// UnsafeBaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseServer will
// result in compilation errors.
type UnsafeBaseServer interface {
	mustEmbedUnimplementedBaseServer()
}

func RegisterBaseServer(s grpc.ServiceRegistrar, srv BaseServer) {
	s.RegisterService(&Base_ServiceDesc, srv)
}

func _Base_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParametroPut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.base/put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).Put(ctx, req.(*ParametroPut))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParametroGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.base/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).Get(ctx, req.(*ParametroGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParametroGetAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.base/getAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).GetAll(ctx, req.(*ParametroGetAll))
	}
	return interceptor(ctx, in, info, handler)
}

// Base_ServiceDesc is the grpc.ServiceDesc for Base service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Base_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db.base",
	HandlerType: (*BaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "put",
			Handler:    _Base_Put_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Base_Get_Handler,
		},
		{
			MethodName: "getAll",
			Handler:    _Base_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/db.proto",
}
